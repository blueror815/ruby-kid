##################################
AWS

----------------------------------
EC2 Instance

Production -----------------
ec2-54-173-211-252.compute-1.amazonaws.com

Staging -----------------
ec2-52-4-158-156.compute-1.amazonaws.com

==============================
Connection to AWS server

chmod 400 ~/.ssh/cubbyshopft.pem 

Connect to your instance using its Public IP:
staging: 54.165.129.11
production: 54.165.40.102

Example:
ssh -i ~/.ssh/cubbyshopft.pem ec2-user@54.172.201.158


-------------------------------
Set in /etc/hosts aliases to corresponding IPs, like this for all in localhost:

127.0.0.1   localhost localhost.localdomain currentdb rubydev localgit


###############################################
For all virtual machine/instance

================================
Basic Development Tools

sudo yum install gcc
sudo yum install gcc-c++ make
sudo yum -y groupinstall "Development Tools"

=========================================
MySQL Libraries and Client

sudo yum install mysql
sudo yum install mysql-devel

sudo useradd mysql
sudo passwd mysql
cbs214Db
sudo usermod -a -G mysql ec2-user

sudo useradd -s /sbin/nologin -r www
sudo usermod -a -G www ec2-user

.. logout & relogin
 
sudo mkdir /var/lib/mysql
sudo chown mysql:mysql /var/lib/mysql -R


================================
MySQL Server Local

sudo yum install mysql-server

---------------------------
Check /etc/my.cnf

change 
socket=/var/run/mysqld/mysqld.sock

sudo /etc/init.d/mysqld start

------------------------------------------
Login to mysql
mysql -uroot --socket=/var/run/mysqld/mysqld.sock


====================================
MySQL Server in OS X

brew install mysql
export DYLD_LIBRARY_PATH=/opt/local/lib/mysql56/mysql:$DYLD_LIBRARY_PATH
export PATH=/opt/local/bin:/opt/local/sbin:/usr/local/mysql/bin:~/.bin:$PATH

====================================
MySQL Server - Remote Virtual Instance

DNS: cubbyshopproduction.c9nlh0zvqqy7.us-east-1.rds.amazonaws.com


==============================================
MySQL Initialization

GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' IDENTIFIED BY 'test' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'root'@'currentdb' IDENTIFIED BY 'test' WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON *.* TO 'kids_toys'@'localhost' IDENTIFIED BY 'test' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'kids_toys'@'currentdb' IDENTIFIED BY 'test' WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON *.* TO 'kids_toys_prod'@'localhost' IDENTIFIED BY 'cbs214DbProd' WITH GRANT OPTION;
GRANT ALL PRIVILEGES ON *.* TO 'kids_toys_prod'@'currentdb' IDENTIFIED BY 'cbs214DbProd' WITH GRANT OPTION;

create database kids_toys_development;
create database kids_toys_test;
create database kids_toys_production;

---------------------- Populate Static Data: schools, categories

Populate with sql files, categories.sql and static_data.sql like this:
mysql -uroot -ptest -Dkids_toys_development < doc/data/categories.sql
mysql -uroot -ptest -Dkids_toys_development < doc/data/static_data.sql


---------------------- Fix for UTF8 problem

ALTER DATABASE kids_toys_development DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
ALTER DATABASE kids_toys_production DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

alter table items modify title varchar(191), modify status varchar(191), modify default_thumbnail_url varchar(191), modify age_group varchar(55);
alter table notification_mails modify status varchar(55);
alter table notifications modify title varchar(191), modify uri varchar(191), modify local_references_code varchar(191), modify status varchar(55), modify related_model_type varchar(127), modify tip varchar(191);
alter table permissions modify object_type varchar(127), modify object_id varchar(191);
alter table schema_migrations modify version varchar(191);
alter table users modify reset_password_token varchar(191), modify email varchar(191);
alter table user_relationships modify relationship_type varchar(55);
alter table zip_codes modify zip varchar(55), modify state_type varchar(24), modify primary_city varchar(191), modify acceptable_cities varchar(191), modify unacceptable_cities varchar(191);
alter table zip_codes modify state varchar(55), modify county varchar(55), modify area_codes varchar(127), modify world_region varchar(191), modify country varchar(127);

ALTER TABLE all_categories CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE cart_items CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE categories CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE categories_items CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE countries CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE country_states CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE delayed_jobs CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE favorite_items CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE followers_users CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE item_comments CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE item_keywords CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE item_photos CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE items CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE notification_mails CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE notifications CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE offer_bundles CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE offer_bundles_items CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE offer_responses CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE permissions CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE schema_migrations CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE schools CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE schools_users CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE user_locations CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE user_phones CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE user_relationships CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE users CHARACTER SET utf8 COLLATE utf8_unicode_ci;
ALTER TABLE zip_codes CHARACTER SET utf8 COLLATE utf8_unicode_ci;


///////sudo mysqladmin cbs214DB cbs214DB

gem install mysql -v '2.9.1' -- --with-mysql-dir=/usr/local/mysql

And add onto ~/.bash_profile

MYSQL=/usr/local/mysql/bin
export PATH=$PATH:$MYSQL
export DYLD_LIBRARY_PATH=/usr/local/mysql/lib:$DYLD_LIBRARY_PATH

sudo ln -s /usr/local/mysql/lib/libmysqlclient.18.dylib /usr/lib/libmysqlclient.18.dylib

===============================
Ruby on Rails

gpg --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3
curl -sSL https://get.rvm.io | bash -s stable --ruby=1.9.3
source ~/.profile
rvm use 1.9.3 --default
Server: SOLR: settings of SOLR needed for servers

==============================
sudo yum install ImageMagick
sudo yum install ImageMagick-devel


=================================================
GIT

sudo yum install git

--------------------------------------
Make GIT repository remotely 

sudo mkdir -p /var/www
sudo chown -R www:www /var/www
 
mkdir -p ~/git/cubby_shop_web.git
cd ~/git/cubby_shop_web.git
git init --bare

git config --global user.name "Brian Gan"
git config --global user.email "briangangster@gmail.com"
git config --global alias.stash-unapply 'git stash -p | git apply -R'
 
-----------------------------------
Add & push from local to remote GIT repo 
git remote add sandbox cubby_shop_sandbox:/home/ec2-user/git/cubby_shop_web.git

Call to push remote:
git push sandbox master

-----------------------------------------
On remote server, 

git config credential.helper store
cd /var/www/
git clone file://///home/ec2-user/git/cubby_shop_web.git cubby_shop

cd cubby_shop
mkdir -p log
mkdir -p tmp/cache
mkdir -p tmp/pids
mkdir -p tmp/sockets

If permission problem still occurs in accessing /var/www, move to ~/code/
or 
add to ignore filemode bits:
git config core.filemode false


Set auto post-receive script to copy code updates when pushed

vi hooks/post-receive
  and add:
  
#!/bin/bash

while read oldrev newrev ref
do
  branch=`echo $ref | cut -d/ -f3`
  if [ "production" == "$branch" -o "master" == "$branch" ]; then
    
    cd /var/www/cubby_shop
    git checkout -f $branch
    git pull origin $branch
    
    echo 'Changes pushed to Amazon EC2 Sandbox.'
  fi

done

Then
chmod +x hooks/post-receive


------------------------------------------
Dump existing static data from local by:

mysqldump -hcurrentdb -ukids_toys_prod -pcbs214DbProd --opt --skip-lock-tables kids_toys_development all_categories categories countries country_states schools zip_codes > doc/data/static_data.sql
mysqldump -hcurrentdb -uroot -ptest --opt --skip-lock-tables kids_toys_development categories  > doc/data/categories.sql

On remote database, import by:

mysql -hcubbyshopproduction.c9nlh0zvqqy7.us-east-1.rds.amazonaws.com -ukids_toys_prod -pcbs214DbProd -Dkids_toys_production < doc/data/static_data.sql

mysql -hcubbyshopproduction.c9nlh0zvqqy7.us-east-1.rds.amazonaws.com -ukids_toys_prod -pcbs214DbProd -Dkids_toys_production < doc/data/categories.sql


===============================================
Ruby on Rails Env

To wherever the root of app-server source code root:

---------------------------------
Dependent libraries:

NodeJS: 
wget http://nodejs.org/dist/v0.10.33/node-v0.10.33.tar.gz
tar xzvf node* && cd node*
./configure
make
sudo make install

cd cubby_shop
bundle install

rake db:migrate -t

==============================
Nginx

sudo yum install nginx

sudo ln -s ~/code/cubby_shop /var/www/cubby_shop
sudo chmod -Rf 775 /var/www/cubby_shop
sudo chmod -Rf 775 /var/www/cubby_shop/tmp
sudo chmod -Rf 775 /var/lib/nginx/tmp
sudo chown -R nobody.nobody /var/lib/nginx

sudo mkdir -p /etc/nginx/sites-enabled
sudo ln -s /var/www/cubby_shop/config/nginx_unicorn.conf /etc/nginx/sites-enabled/cubby_shop

------------------------
Simply ensure 
  sendfile off;
Or
  set /etc/nginx/nginx.conf

user www;
worker_processes  1;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    # multi_accept on;
}

http {
    include       /etc/nginx/mime.types;

    access_log        /var/log/nginx/access.log;

    sendfile        off;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}

------------------------
Can run Nginx by:
sudo /etc/init.d/nginx start
.. but don't know why sudo service nginx start doesn't turn to be same

------------------------
OS X paths:

brew install nginx

Setup auto-launch in OS X by linking homebrew's 
mkdir -p ~/Library/LaunchAgents
cp /usr/local/Cellar/nginx/1.2.2/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist

==========================================
Unicorn

mkdir -p /tmp/sockets

Start in daemon mode by:
unicorn_rails -c config/unicorn.rb -D -E production

Stop daemon after finding the master's process ID
kill -s QUIT 12345

==========================================
SOLR Server

Ensure in config/sunspot.yml
path: /solr/default

---------------------------------
Runs by 
RAILS_ENV=production rake sunspot:solr:start

---------------------------------
Repopulate data:

Item.reindex
Category.reindex
User.reindex
Schools::School.reindex


==========================================
memcached

OS X
cp /usr/local/Cellar/memcached/1.4.20/homebrew.mxcl.memcached.plist ~/Library/LaunchAgents/
launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.memcached.plist

==========================================
CarrierWave background script

rails g carrierwave_backgrounder:install

==========================================
Delayed Job

rails generate delayed_job:active_record
rake db:migrate

==========================================
Redis Server

Refer to: http://redis.io/topics/quickstart

mkdir /tmp/redis && redis-cli CONFIG SET dir /tmp/redis
redis-cli CONFIG SET dbfilename temp.rdb


===============================================
Run Servers

RAILS_ENV=production rake sunspot:solr:start

RAILS_ENV=production whenever --update-crontab store

RAILS_ENV=production rake assets:precompile

RAILS_ENV=production unicorn_rails -c config/unicorn.rb -D -E production

/etc/init.d/redis_6379 start

RAILS_ENV=production bundle exec sidekiq -d -L log/sidekiq.log

sudo /etc/init.d/nginx start

===============================================
Setup Tasks

Edit crontab -e

for development mode:
*/5 * * * * cd /mnt/media/code/kids_toys && ~/.rvm/gems/ruby-1.9.3-p547/bin/rake deliver_notification_mails 2>&1 >> log/user_mailer.log &
*/5 * * * * cd /mnt/media/code/kids_toys && ~/.rvm/gems/ruby-1.9.3-p547/bin/rake notify_to_approve_items 2>&1 >> log/approve_items.log &
*/30 * * * * cd /mnt/media/code/kids_toys && ~/.rvm/gems/ruby-1.9.3-p547/bin/rake clean_up_expired_notifications 2>&1 >> log/user_notification.log &

for production server:
0,5,10,15,20,25,30,35,40,45,50,55 * * * * /bin/bash -l -c 'cd /var/www/cubby_shop && RAILS_ENV=production bundle exec rake deliver_notification_mails --silent'
0,5,10,15,20,25,30,35,40,45,50,55 * * * * /bin/bash -l -c 'cd /var/www/cubby_shop && RAILS_ENV=production bundle exec rake notify_to_approve_items --silent'
0,5,10,15,20,25,30,35,40,45,50,55 * * * * /bin/bash -l -c 'cd /var/www/cubby_shop && RAILS_ENV=production bundle exec rake clean_up_expired_notifications --silent'

------------------------------
Use alternative method: whenever

gem install whenever
wheneverize 

Adding this line to your user rvm file in ~/.rvmrc
rvm_trust_rvmrcs_flag=1

whenever --update-crontab store

Edit manually crontab -e, add inside ' ' with:
2>&1 >> log/user_mailer.log
0,5,10,15,20,25,30,35,40,45,50,55 * * * * /bin/bash -l -c 'cd /var/www/cubby_shop && RAILS_ENV=production bundle exec rake deliver_notification_mails --silent 2>&1 >> log/user_mailer.log'


=================================================
Ruby Commands

----------------------------------
Re-process item_photos

Item.all.each{|item| item.item_photos.each{|ip| begin; ip.image.process!; ip.save if ip.changed?; rescue; end; } }.size